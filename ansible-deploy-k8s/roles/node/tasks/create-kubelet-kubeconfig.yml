- name: 准备kubelet 证书签名请求
  template: src={{ item }}.j2 dest={{ k8s_work_dir }}/ssl/{{ item }}
  with_items:
    - kubelet-csr.json

- name: 创建 kubelet 证书与私钥
  shell: "cd {{ k8s_work_dir }}/ssl && cfssl gencert \
        -ca={{ k8s_work_dir }}/ssl/ca.pem \
        -ca-key={{ k8s_work_dir }}/ssl/ca-key.pem \
        -config={{ k8s_work_dir }}/ssl/ca-config.json \
        -profile=kubernetes kubelet-csr.json | cfssljson -bare kubelet"

# 创建kubelet.kubeconfig
- name: 设置集群参数
  shell: "kubectl config set-cluster kubernetes \
        --certificate-authority={{ k8s_work_dir }}/ssl/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }} \
        --kubeconfig={{ k8s_work_dir }}/cfg/kubelet-bootstrap.kubeconfig"

- name: 设置客户端认证参数
  shell: "kubectl config set-credentials system:node:{{ inventory_hostname }} \
        --client-certificate={{ k8s_work_dir }}/ssl/kubelet.pem \
        --client-key={{ k8s_work_dir }}/ssl/kubelet-key.pem \
        --embed-certs=true \
        --kubeconfig={{ k8s_work_dir }}/cfg/kubelet-bootstrap.kubeconfig"

- name: 设置上下文参数
  shell: "kubectl config set-context default \
        --cluster=kubernetes \
        --user=system:node:{{ inventory_hostname }} \
        --kubeconfig={{ k8s_work_dir }}/cfg/kubelet-bootstrap.kubeconfig"

- name: 选择默认上下文
  shell: "kubectl config use-context default \
        --kubeconfig={{ k8s_work_dir }}/cfg/kubelet-bootstrap.kubeconfig"
