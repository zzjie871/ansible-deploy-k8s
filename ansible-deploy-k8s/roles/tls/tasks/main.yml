---
- name: 1-1.创建ansible工作目录
  file: name={{ item }} state=directory
  with_items:
  - "{{ base_dir }}/ssl"
  - "{{ base_dir }}/backup"

- name: 1-2.创建临时目录
  file: dest={{ tmp_dir }} state=directory

- name: 2-1.准备cfssl工具
  unarchive: src={{ software_dir }}/cfssl.tar.gz dest=/usr/bin/ mode=u+x

- name: 2-2.分发并解压k8s二进制包
  unarchive: src={{ item }} dest={{ tmp_dir }}
  with_fileglob:
    - "{{ software_dir }}/kubernetes-*.tar.gz"
  tags: kube-tools

- name: 2-3.分发 k8s master 二进制文件
  shell: cp -rf {{ tmp_dir }}/kubernetes/server/bin/{kubectl,kubeadm} /usr/local/bin/
  tags: kube-tools

# 注册变量p，根据p的stat信息判断是否已经生成过ca证书，如果没有，下一步生成证书
# 如果已经有ca证书，为了保证整个安装的幂等性，跳过证书生成的步骤
- name: 3.读取ca证书stat信息
  stat: path="{{ base_dir }}/ssl/ca.pem"
  register: p

- name: 4.准备CA配置文件和签名请求
  template: src={{ item }}.j2 dest={{ base_dir }}/ssl/{{ item }}
  with_items:
  - "ca-config.json"
  - "ca-csr.json"
  when: p.stat.isreg is not defined

- name: 5.生成 CA 证书和私钥
  when: p.stat.isreg is not defined
  shell: "cd {{ base_dir }}/ssl && cfssl gencert -initca ca-csr.json | cfssljson -bare ca" 

- name: 6.准备 apiserver 证书配置文件
  template: src={{ item }}.j2 dest={{ base_dir }}/ssl/{{ item }}
  with_items:
  - "kubernetes-csr.json"

- name: 7.创建 apiserver 证书和私钥
  shell: "cd {{ base_dir }}/ssl/ && \ 
        cfssl gencert \
        -ca={{ base_dir }}/ssl/ca.pem \
        -ca-key={{ base_dir }}/ssl/ca-key.pem \
        -config={{ base_dir }}/ssl/ca-config.json \
        -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes"
  
- name: 6.准备 etcd 证书配置文件
  template: src={{ item }}.j2 dest={{ base_dir }}/ssl/{{ item }}
  with_items:
  - "etcd-csr.json"

- name: 7.创建 etcd 证书和私钥
  shell: "cd {{ base_dir }}/ssl/ && \ 
        cfssl gencert \
        -ca={{ base_dir }}/ssl/ca.pem \
        -ca-key={{ base_dir }}/ssl/ca-key.pem \
        -config={{ base_dir }}/ssl/ca-config.json \
        -profile=kubernetes etcd-csr.json | cfssljson -bare etcd"
  
- name: 8.准备 proxy-client 证书配置文件
  template: src={{ item }}.j2 dest={{ base_dir }}/ssl/{{ item }}
  with_items:
  - "proxy-client-csr.json"

- name: 9.创建 proxy-client 证书和私钥
  shell: "cd {{ base_dir }}/ssl/ && \ 
        cfssl gencert \
        -ca={{ base_dir }}/ssl/ca.pem \
        -ca-key={{ base_dir }}/ssl/ca-key.pem \
        -config={{ base_dir }}/ssl/ca-config.json \
        -profile=kubernetes proxy-client-csr.json | cfssljson -bare proxy-client"

- name: 创建 calico 证书请求
  template: src={{ item }}.j2 dest={{ base_dir }}/ssl/{{ item }}
  with_items:
  - "calico-csr.json"
  tags: calico

- name: 创建 calico 证书和私钥
  shell: "cd {{ base_dir }}/ssl/ && \
        cfssl gencert \
        -ca={{ base_dir }}/ssl/ca.pem \
        -ca-key={{ base_dir }}/ssl/ca-key.pem \
        -config={{ base_dir }}/ssl/ca-config.json \
        -profile=kubernetes calico-csr.json | cfssljson -bare calico"
  tags: calico

#----------- 创建配置文件: /root/.kube/config
- import_tasks: create-kubectl-kubeconfig.yml

#------------创建配置文件: kube-proxy.kubeconfig
- import_tasks: create-kube-proxy-kubeconfig.yml

##------------创建配置文件: kube-controller-manager.kubeconfig
- import_tasks: create-kube-controller-manager-kubeconfig.yml

#------------创建配置文件: kube-scheduler.kubeconfig
- import_tasks: create-kube-scheduler-kubeconfig.yml


